/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "TripleGauss.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(TripleGauss) 

 TripleGauss::TripleGauss(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _m1,
                        RooAbsReal& _s1,
                        RooAbsReal& _f1,
                        RooAbsReal& _m2,
                        RooAbsReal& _s2,
                        RooAbsReal& _f2,
                        RooAbsReal& _m3,
                        RooAbsReal& _s3) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
    m1(" m1"," m1",this,_m1),
    s1(" s1"," s1",this,_s1),
    f1(" f1"," f1",this,_f1),
    m2(" m2"," m2",this,_m2),
    s2(" s2"," s2",this,_s2),
    f2(" f2"," f2",this,_f2),
    m3(" m3"," m3",this,_m3),
   s3("s3","s3",this,_s3)
 { 
 } 


 TripleGauss::TripleGauss(const TripleGauss& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
    m1(" m1",this,other. m1),
    s1(" s1",this,other. s1),
    f1(" f1",this,other. f1),
    m2(" m2",this,other. m2),
    s2(" s2",this,other. s2),
    f2(" f2",this,other. f2),
    m3(" m3",this,other. m3),
   s3("s3",this,other.s3)
 { 
 } 



 Double_t TripleGauss::evaluate() const 
 { 
   if(s1 <=0 || s2 <=0 || s3 <=0)return 0;
   if(f1 < 0 || f1 > 1)return 0;
   if(f2 < 0 || f2 > 1)return 0;

   Double_t arg1 = x - m1;  
   Double_t arg2 = x - m2;  
   Double_t arg3 = x - m3;  

   Double_t part1 = f1*exp(-0.5*arg1*arg1/(s1*s1)) ;
   Double_t part2 = f2*exp(-0.5*arg2*arg2/(s2*s2)) ;
   Double_t part3 = (1-f1-f2)*exp(-0.5*arg3*arg3/(s3*s3)) ;
   return part1 + part2 + part3;
 } 



